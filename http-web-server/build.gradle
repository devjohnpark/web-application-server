plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'java'
}

group = 'org.doci'
version = '1.0.0-SNAPSHOT'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // add logback with SLF4J (Logging Implementation)
    implementation libs.logback.classic

    // Add AssertJ dependency
    testImplementation libs.assertj.core

    // Add SLF4J API dependency
    implementation libs.slf4j.api
}

// Auto download and install designated java version (default temurin)
// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

def jarManifestAttributes = [
        'Main-Class': 'com.hello_webserver.webserver.WebServer'
]

// Build to jar file task (./gradlew build, ./gradlew jar)
// When run the ./gradlew build command, the default `jar` task is applied.
tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE // remove duplication task

    // include all runtime dependencies in the JAR file
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    // set main class path
    manifest {
        attributes(jarManifestAttributes)
    }
}
